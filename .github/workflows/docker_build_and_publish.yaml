name: "Docker Build and Publish"

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      go_version:
        description: "Version of go runtime to install"
        type: string
        default: '1.21.1'
      build_src:
        description: "Src version to build. For GitTag: \"tag:[name]\", For GitBranch: \"branch:[name]\", For GitCommit: \"commit:[hash]\", For EcrTag: \"ecr:[tag]\", For PullRequest: \"pr:[number]\""
        required: false
        type: string
        default: ''
      docker_file:
        required: false
        type: string
        default: Dockerfile
    secrets:
      gh_sudo_token:
        required: true
    outputs:
      image_tag:
        description: "Docker image tag from build"
        value: ${{ jobs.docker_build_and_publish.outputs.image_tag }}

jobs:
  docker_build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.job_info.outputs.ecr_tag }}
    steps:
      - name: Process Build Src
        id: build_src
        run: |
          IFS=':'
          read -a PARTS <<< "$BUILD_SRC"

          if [ "x$BUILD_SRC" == "x" ]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
            echo "run_ecr=false" >> $GITHUB_OUTPUT
            echo "git_ref=$GITSHA" >> $GITHUB_OUTPUT
          elif [[ "$BUILD_SRC" =~ ^tag:.*$ ]]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
            echo "run_ecr=false" >> $GITHUB_OUTPUT
            echo "git_ref=refs/tags/${PARTS[1]}" >> $GITHUB_OUTPUT
          elif [[ "$BUILD_SRC" =~ ^branch:.*$ ]]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
            echo "run_ecr=false" >> $GITHUB_OUTPUT
            echo "git_ref=refs/heads/${PARTS[1]}" >> $GITHUB_OUTPUT
          elif [[ "$BUILD_SRC" =~ ^pr:.*$ ]]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
            echo "run_ecr=false" >> $GITHUB_OUTPUT
            echo "gh_pr_num=${PARTS[1]}" >> $GITHUB_OUTPUT
            echo "git_ref=refs/pull/${PARTS[1]}/head" >> $GITHUB_OUTPUT
          elif [[ "$BUILD_SRC" =~ ^commit:.*$ ]]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
            echo "run_ecr=false" >> $GITHUB_OUTPUT
            echo "git_ref=${PARTS[1]}" >> $GITHUB_OUTPUT
          elif [[ "$BUILD_SRC" =~ ^ecr:.*$ ]]; then
            echo "run_build=false" >> $GITHUB_OUTPUT
            echo "run_ecr=true" >> $GITHUB_OUTPUT
            echo "ecr_tag=${PARTS[1]}" >> $GITHUB_OUTPUT
          else
            echo "Unknown build src type '$BUILD_SRC'. Expecting one of (tag|branch|pr|commit|ecr)"
            exit -1
          fi
          cat $GITHUB_OUTPUT
        env:
          GITSHA: ${{ github.sha }}
          BUILD_SRC: ${{ inputs.build_src }}
      - name: Git Fetch
        if: steps.build_src.outputs.run_build == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.build_src.outputs.git_ref }}
      - name: Check for go repo
        id: go_check
        run: |
          if [ -f "go.mod" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Get Last Git Commit Info
        if: steps.build_src.outputs.run_build == 'true'
        id: git_info
        run: |
          if [ "x$GH_PR_NUM" == "x" ]; then
            echo "date=$(git log --date=local -1 --format="%at" | xargs -I{} date -d @{} +%Y%m%d)" >> $GITHUB_OUTPUT
          else
            echo "date=PR$GH_PR_NUM" >> $GITHUB_OUTPUT
          fi

          echo "short_sha=$(git log -1 --format=%h)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        env:
          GH_PR_NUM: ${{ steps.build_src.outputs.gh_pr_num }}
          TZ: UTC
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Git for Go
        run: git config --global url."https://git:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
        env:
          GITHUB_TOKEN: ${{ secrets.gh_sudo_token }}
      - name: Install Go
        uses: actions/setup-go@v4
        if: steps.go_check.outputs.exists == 'true'
        with:
          go-version: ${{ inputs.go_version }}
      - name: Go Mod Vendor
        if: steps.go_check.outputs.exists == 'true'
        run: |
          go mod tidy
          go mod vendor
        env:
          GOPRIVATE: github.com/fpmi-hci-2023/*
      - name: Set up Docker Buildx
        if: steps.build_src.outputs.run_build == 'true'
        uses: docker/setup-buildx-action@v2
      - name: Docker Build
        if: steps.build_src.outputs.run_build == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ inputs.docker_file }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ steps.git_info.outputs.date }}-${{ steps.git_info.outputs.short_sha }}
          build-args: |
            GO_VERSION=${{ inputs.go_version }}
            GITHUB_TOKEN=${{ secrets.gh_sudo_token }}
            version=${{ steps.git_info.outputs.date }}
            commit=${{ steps.git_info.outputs.short_sha }}
